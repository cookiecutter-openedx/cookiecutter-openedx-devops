#------------------------------------------------------------------------------
# written by: mcdaniel
# date: feb-2022
#
# usage: deploy a Tutor-created openedx Docker image to the Kubernetes cluster.
#        The openedx docker image is created by a Github action in tutor-build.git.
#
#        The general work flow in this action is:
#        1. Setup Tutor inside a Github ubuntu workspace
#        2. Setup the AWS Kubernetes controller inside the Github ubuntu workspace
#        3. Grab backing service login credentials that were previously stored in
#           Kubernetes secrets by terraform-openedx.git
#        4. map the openedx docker container to use (stored in AWS Elastic Container Service)
#        5. configure all backing services: mysql, mongo, redis, smtp, s3
#        6. add all edxapp lms/studio configuration (ie stuff from lms.yml and studio.yml)
#        7. use Tutor to startup the edxapp platform
#        8. initialize Kubernetes, and then let it take over
#------------------------------------------------------------------------------
name: Tutor Deploy Prod

on: [workflow_dispatch]

jobs:
  deploy:
    runs-on: ubuntu-20.04
    env:
      KUBECONFIG: /home/runner/.kube/config
      ENVIRONMENT_ID: prod
      NAMESPACE: {{ cookiecutter.prod_environment }}-{{ cookiecutter.global_platform_name }}-{{ cookiecutter.global_platform_region }}
      TUTOR_VERSION: {{ cookiecutter.ci_build_tutor_version }}
      OPENEDX_COMMON_VERSION: {{ cookiecutter.ci_deploy_OPENEDX_COMMON_VERSION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      # grab the AWS IAM key and scret for the IAM user named 'ci'
      # These were manually stored in https://github.com/{{ cookiecutter.github_account_name }}/tutor-deploy/settings/secrets/actions
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: {% raw %}${{ secrets.AWS_ACCESS_KEY_ID }}{% endraw %}
          aws-secret-access-key: {% raw %}${{ secrets.AWS_SECRET_ACCESS_KEY }}{% endraw %}
          aws-region: {{ cookiecutter.global_aws_region }}

      - name: Get Kube config
        run: aws eks --region {{ cookiecutter.global_aws_region }} update-kubeconfig --name {{ cookiecutter.prod_environment }}-{{ cookiecutter.global_platform_name }}-{{ cookiecutter.global_platform_region }} --alias eks-prod

      - name: Install kubectl
        uses: azure/setup-kubectl@v1
        id: install-kubectl

      - name: Setup Python
        run: sudo apt install python3 python3-pip libyaml-dev

      - name: Install Tutor (from source)
        run: |-
          pip install --upgrade pyyaml
          echo "TUTOR_ROOT=$GITHUB_WORKSPACE/tutor" >> $GITHUB_ENV
          git clone https://github.com/overhangio/tutor.git
          cd tutor
          git checkout ${TUTOR_VERSION}
          pip install -e .
          echo "TUTOR_VERSION=$(tutor --version | cut -f3 -d' ')" >> $GITHUB_ENV

      - name: Configure Open edX version
        run: |-
          echo "OPENEDX_COMMON_VERSION=$OPENEDX_COMMON_VERSION" >> $GITHUB_ENV

      # see: https://github.com/{{ cookiecutter.github_account_name }}/terraform-openedx/tree/main/ci/tutor-deploy/environments/prod/jwt
      - name: Fetch JWT token
        run: |-
          ### Fetch secrets from Kubernetes into Environment
          kubectl get secret jwt -n $NAMESPACE -o json |  jq  '.data| map_values(@base64d)'  | jq -r 'keys[] as $k | "\(.[$k])"' > jwt_private_key

      # see: https://github.com/{{ cookiecutter.github_account_name }}/terraform-openedx/tree/main/ci/tutor-deploy/environments/prod/rds
      - name: MySQL
        run: |-
          echo "TUTOR_RUN_MYSQL=false" >> $GITHUB_ENV
          kubectl get secret mysql-root -n $NAMESPACE  -o json | jq  '.data | map_values(@base64d)' | jq -r 'keys[] as $k | "TUTOR_\($k|ascii_upcase)=\(.[$k])"' >> $GITHUB_ENV
          kubectl get secret mysql-openedx -n $NAMESPACE  -o json | jq  '.data | map_values(@base64d)' | jq -r 'keys[] as $k | "TUTOR_\($k|ascii_upcase)=\(.[$k])"' >> $GITHUB_ENV

      - name: MongoDB
        run: |-
          echo "TUTOR_RUN_MONGODB=false" >> $GITHUB_ENV
          kubectl get secret mongodb-admin -n $NAMESPACE  -o json | jq  '.data | map_values(@base64d)' | jq -r 'keys[] as $k | "TUTOR_\($k|ascii_upcase)=\(.[$k])"' >> $GITHUB_ENV

      # see: https://github.com/{{ cookiecutter.github_account_name }}/terraform-openedx/tree/main/ci/tutor-deploy/environments/prod/redis
      - name: Redis
        run: |-
          echo "TUTOR_RUN_REDIS=false" >> $GITHUB_ENV
          kubectl get secret redis -n $NAMESPACE  -o json | jq  '.data | map_values(@base64d)' | jq -r 'keys[] as $k | "TUTOR_\($k|ascii_upcase)=\(.[$k])"' >> $GITHUB_ENV

      # ---------------------------------------------------------------------------------
      # Note: We're not managing AWS SES with Terraform simply because the service is fiddly
      # and AWS is neurotic about any changes to the config.
      # ---------------------------------------------------------------------------------
      - name: Setup AWS SES over SMTP
        run: |-
          echo "TUTOR_RUN_SMTP=true" >> $GITHUB_ENV
          tutor config save --set EMAIL_BACKEND="django.core.mail.backends.smtp.EmailBackend" \
                            --set EMAIL_HOST="{{ cookiecutter.ci_deploy_EMAIL_HOST }}" \
                            --set EMAIL_HOST_PASSWORD={% raw %}${{ secrets.AWS_SES_IAM_SECRET }}{% endraw %} \
                            --set EMAIL_HOST_USER={% raw %}${{ secrets.AWS_SES_IAM_KEY }}{% endraw %} \
                            --set EMAIL_PORT={{ cookiecutter.ci_deploy_EMAIL_PORT }} \
                            --set EMAIL_USE_TLS={{ cookiecutter.ci_deploy_EMAIL_USE_TLS }}

      # see: https://github.com/{{ cookiecutter.github_account_name }}/terraform-openedx/blob/main/components/secrets/session.tf
      - name: EDX Secret Key
        run: |-
          kubectl get secret edx-secret-key -n $NAMESPACE  -o json | jq  '.data | map_values(@base64d)' | jq -r 'keys[] as $k | "TUTOR_\($k|ascii_upcase)=\(.[$k])"' >> $GITHUB_ENV

      - name: Load environment specific settings (direct)
        run: |-
          # Pin the instalation ID with the Kubernetes namespace. It needs to be unique and static per instalation.
          cat ci/tutor-deploy/environments/$ENVIRONMENT_ID/config.yml >> $GITHUB_ENV

      # note that values like $LMS_HOSTNAME come from this repo
      # in /ci/tutor-deploy/environments/prod/config.yml
      - name: Load additional environment specific settings  (computed)
        run: |-
          # We don't want to run these services as we are using the Kubernetes ingress instead.
          echo "TUTOR_ID=tutor-$NAMESPACE" >> $GITHUB_ENV
          echo "TUTOR_LMS_HOST=$LMS_HOSTNAME" >> $GITHUB_ENV
          echo "TUTOR_CMS_HOST=$CMS_HOSTNAME" >> $GITHUB_ENV
          echo "TUTOR_K8S_NAMESPACE=$NAMESPACE" >> $GITHUB_ENV
          echo "TUTOR_DOCKER_IMAGE_OPENEDX=$DOCKER_IMAGE_OPENEDX" >> $GITHUB_ENV
          echo "TUTOR_RUN_CADDY=false" >> $GITHUB_ENV
          echo "TUTOR_RUN_NGINX=false" >> $GITHUB_ENV

      # note that the Kubernetes additional config data is locally
      # stored in ci/tutor-deploy/environments/prod/k8s/
      - name: Create Kubernetes add-on resources
        run:  |-
          # Create kubernetes ingress and other environment resources
          kubectl apply -f "ci/tutor-deploy/environments/$ENVIRONMENT_ID/k8s"

      # Notes: OPENEDX_AWS_ACCESS_KEY, OPENEDX_AWS_SECRET_ACCESS_KEY and S3_STORAGE_BUCKET
      #        are stored in EKS kubernetes secrets, viewable from k9s.
      #        example values:
      #          OPENEDX_AWS_ACCESS_KEY: ABDCE123456789OHBBGQ
      #          OPENEDX_AWS_SECRET_ACCESS_KEY: A123456789srJ8lgel+ABCDEFGHIJKabcdefghijk
      #          S3_STORAGE_BUCKET: {{ cookiecutter.prod_environment }}-{{ cookiecutter.global_platform_name }}-{{ cookiecutter.global_platform_region }}-storage
      #          S3_CUSTOM_DOMAIN: cdn.{{ cookiecutter.prod_environment }}.{{ cookiecutter.global_root_domain }}
      #          S3_REGION: {{ cookiecutter.global_aws_region }}
      #
      # this config depends on a public read-only AWS S3 bucket policy like this:
      # https://github.com/{{ cookiecutter.github_account_name }}/terraform-openedx/blob/main/components/s3/main.tf#L19
      #
      #      {
      #          "Version": "2012-10-17",
      #          "Statement": [
      #              {
      #                  "Sid": "",
      #                  "Effect": "Allow",
      #                  "Principal": "*",
      #                  "Action": [
      #                      "s3:GetObject*",
      #                      "s3:List*"
      #                  ],
      #                  "Resource": "arn:aws:s3:::{{ cookiecutter.prod_environment }}-{{ cookiecutter.global_platform_name }}-{{ cookiecutter.global_platform_region }}-storage/*"
      #              }
      #          ]
      #      }
      #
      - name: Install S3 plugin
        run: |-
          pip install git+https://github.com/hastexo/tutor-contrib-s3@v0.2.0
          tutor plugins enable s3
          tutor config save

          kubectl get secret s3-openedx-storage -n $NAMESPACE  -o json | jq  '.data | map_values(@base64d)' | jq -r 'keys[] as $k | "TUTOR_\($k|ascii_upcase)=\(.[$k])"' >> $GITHUB_ENV

          tutor config save --set OPENEDX_AWS_ACCESS_KEY="$OPENEDX_AWS_ACCESS_KEY" \
                            --set OPENEDX_AWS_SECRET_ACCESS_KEY="$OPENEDX_AWS_SECRET_ACCESS_KEY" \
                            --set OPENEDX_AWS_QUERYSTRING_AUTH="False" \
                            --set OPENEDX_AWS_S3_SECURE_URLS="False" \
                            --set S3_STORAGE_BUCKET="$S3_STORAGE_BUCKET" \
                            --set S3_CUSTOM_DOMAIN="$S3_CUSTOM_DOMAIN" \
                            --set S3_REGION="$S3_REGION"

      - name: Configure 3rd Party Authentication
        run:  |-
          tutor config save --set OPENEDX_FACEBOOK_APP_ID="{% raw %}${{ secrets.FACEBOOK_APP_ID }}{% endraw %}" \
                            --set OPENEDX_FACEBOOK_APP_SECRET="{% raw %}${{ secrets.FACEBOOK_APP_SECRET }}{% endraw %}"

      - name: Generate Tutor Config
        run:  |-
          export TUTOR_JWT_RSA_PRIVATE_KEY=\'$(sed -E 's/$/\n/g' ./jwt_private_key)\'
          tutor --version
          tutor config save
          cat $TUTOR_ROOT/config.yml

      # in this step we're combining our custom configuration data
      # from ci/tutor-deploy/environments/prod/settings_merge.json with the default
      # config that was created when we built the openedx docker image with tutor
      - name: Patch Generated Configuration (Static)
        run:  |-
          echo "config.yml full path: $(tutor config printroot)/config.yml"
          cat "$(tutor config printroot)/config.yml"
          echo ""
          echo ""


          cd $TUTOR_ROOT/env/apps/openedx/config/

          mv lms.env.json lms.env.json.orig
          jq -s '.[0] * .[1]'  lms.env.json.orig  "$GITHUB_WORKSPACE/ci/tutor-deploy/environments/$ENVIRONMENT_ID/settings_merge.json" >  lms.env.json

          echo 'Tutor lms.env.json contents:'
          cat lms.env.json
          echo ""
          echo ""

          mv cms.env.json cms.env.json.orig
          jq -s '.[0] * .[1]'  cms.env.json.orig  "$GITHUB_WORKSPACE/ci/tutor-deploy/environments/$ENVIRONMENT_ID/settings_merge.json" >  cms.env.json
          rm *orig

          echo 'Tutor cms.env.json contents:'
          cat cms.env.json
          echo ""
          echo ""

      - name: Deploy Tutor
        run:  |-
          tutor k8s start

      - name: Run tutor init
        run:  |-
          tutor k8s init

      - name: Set theme
        run:  |-
          tutor k8s settheme custom-edx-theme

      - name: Create admin user
        run:  |-
          $(kubectl get secret admin-edx -n $NAMESPACE  -o json | jq  '.data | map_values(@base64d)' |   jq -r 'keys[] as $k | "export \($k|ascii_upcase)=\(.[$k])"')
          tutor k8s createuser --password "$ADMIN_PASSWORD" --staff --superuser "$ADMIN_USER" admin@{{ cookiecutter.global_root_domain }}
