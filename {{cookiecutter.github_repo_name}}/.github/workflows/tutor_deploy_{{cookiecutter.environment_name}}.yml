#------------------------------------------------------------------------------
# written by: mcdaniel
# date: feb-2022
#
# usage: deploy a Tutor-created openedx Docker image to the Kubernetes cluster.
#        The openedx docker image is created by a Github action in tutor-build.git.
#
#        The general work flow in this action is:
#        ----------------------------------------
#        I.   Bootstrap the Github Actions Ubuntu instance.
#        II.  Get backend services configuration data stored in Kubernetes secrets
#        III. Configure Open edX by setting environment variables
#        IV.  Merge all of the configuration data into Tutor's Open edX configuration files
#        V.   Deploy Open edX into the Kubernetes cluster
#------------------------------------------------------------------------------
name: {{ cookiecutter.environment_name }} Deploy to Kubernetes

on: [workflow_dispatch]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT_ID: {{ cookiecutter.environment_name }}
      NAMESPACE: openedx-{{ cookiecutter.environment_name }}
      OPENEDX_COMMON_VERSION: {{ cookiecutter.ci_deploy_OPENEDX_COMMON_VERSION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      #------------------------------------------------------------------------
      # I. Bootstrap the Github Actions Ubuntu instance.
      #------------------------------------------------------------------------

      # grab the AWS IAM key and scret for the IAM user named 'ci'
      # These are manually stored in https://github.com/{{ cookiecutter.github_account_name }}/{{ cookiecutter.github_repo_name }}/settings
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: {% raw %}${{ secrets.AWS_ACCESS_KEY_ID }}{% endraw %}
          aws-secret-access-key: {% raw %}${{ secrets.AWS_SECRET_ACCESS_KEY }}{% endraw %}
          aws-region: {{ cookiecutter.global_aws_region }}

      # get the Kubernetes kubeconfig for our cluster. This is a prerequisite to getting any other data about or contained within our cluster.
      # see: https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/
      #
      # summarizing: the kubeconfig (Kubernetes Configuration) is a text file that contains at a minimum
      # three values that are necessary in order to access the Kubernetes cluster using kubectl command line:
      #   - API server endpoint
      #   - EKS Cluster ARN
      #   - Certificate authority (ie the private ssh key)
      - name: Get Kube config
        run: |-
          sudo snap install kubectl --channel={{ cookiecutter.ci_build_kubectl_version }} --classic
          aws eks --region {{ cookiecutter.global_aws_region }} update-kubeconfig --name {{ cookiecutter.global_platform_name }}-{{ cookiecutter.global_platform_region }}-{{ cookiecutter.global_platform_shared_resource_identifier }} --alias eks-{{ cookiecutter.environment_name }}

      # dump version information for aws cli and kubectl to the console
      - name: Check environments versions
        run: |-
          echo "kubectl version:"
          kubectl version --short
          echo
          echo "aws cli version:"
          aws --version

      # install the latest version of python3 which is a prerequisite for running Tutor
      - name: Setup Python
        run: sudo apt install python3 python3-pip libyaml-dev

      # install Tutor which we'll use for configuring and deploying Open edX
      - name: Install Tutor
        run: |-
          pip install --upgrade pyyaml
          echo "TUTOR_ROOT=$GITHUB_WORKSPACE/tutor" >> $GITHUB_ENV
          pip install tutor
          echo "TUTOR_VERSION=$(tutor --version | cut -f3 -d' ')" >> $GITHUB_ENV

      #------------------------------------------------------------------------
      # II. Get all of our backend configuration data that was stored in
      #     Kubernetes secrets by various Terraform modules
      #------------------------------------------------------------------------
      - name: Configure Open edX version
        run: |-
          echo "OPENEDX_COMMON_VERSION=$OPENEDX_COMMON_VERSION" >> $GITHUB_ENV

      # retrieve the Open edX JWT token that we created with Terraform and
      # then stored in Kubernetes secrets
      # see: https://github.com/{{ cookiecutter.github_account_name }}/{{ cookiecutter.github_repo_name }}/blob/main/terraform/modules/kubernetes_secrets/main.tf
      - name: Fetch JWT token
        run: |-
          kubectl get secret jwt -n $NAMESPACE -o json |  jq  '.data| map_values(@base64d)'  | jq -r 'keys[] as $k | "\(.[$k])"' > jwt_private_key

      # retrieve the MySQL connection parameters that we created in Terraform
      # and then stored in Kubernetes secrets. These include:
      #   MYSQL_HOST: mysql.{{ cookiecutter.environment_subdomain }}.{{ cookiecutter.global_root_domain }}
      #   MYSQL_PORT: "3306"
      #   OPENEDX_MYSQL_USERNAME: openedx
      #   OPENEDX_MYSQL_PASSWORD: **************
      #   MYSQL_ROOT_USERNAME: root
      #   MYSQL_ROOT_PASSWORD: *************
      #
      # Also note that we are using jq to add a prefix of "TUTOR_" to each of the parameter names
      #
      # see: https://github.com/{{ cookiecutter.github_account_name }}/{{ cookiecutter.github_repo_name }}/blob/main/terraform/modules/mysql/main.tf
      - name: fetch MySQL configuration from Kubernetes secrets
        run: |-
          echo "TUTOR_RUN_MYSQL=false" >> $GITHUB_ENV
          kubectl get secret mysql-root -n $NAMESPACE  -o json | jq  '.data | map_values(@base64d)' | jq -r 'keys[] as $k | "TUTOR_\($k|ascii_upcase)=\(.[$k])"' >> $GITHUB_ENV
          kubectl get secret mysql-openedx -n $NAMESPACE  -o json | jq  '.data | map_values(@base64d)' | jq -r 'keys[] as $k | "TUTOR_\($k|ascii_upcase)=\(.[$k])"' >> $GITHUB_ENV

      # retrieve the Redis connection parameter that we created in Terraform:
      #   REDIS_HOST: redis.{{ cookiecutter.environment_subdomain }}.{{ cookiecutter.global_root_domain }}
      #
      # see: https://github.com/{{ cookiecutter.github_account_name }}/{{ cookiecutter.github_repo_name }}/blob/main/terraform/modules/redis/main.tf
      - name: fetch Redis configuration from Kubernetes secrets
        run: |-
          echo "TUTOR_RUN_REDIS=false" >> $GITHUB_ENV
          kubectl get secret redis -n $NAMESPACE  -o json | jq  '.data | map_values(@base64d)' | jq -r 'keys[] as $k | "TUTOR_\($k|ascii_upcase)=\(.[$k])"' >> $GITHUB_ENV

      #------------------------------------------------------------------------
      # III. Configure Open edX by setting environment variables
      #------------------------------------------------------------------------

      # ---------------------------------------------------------------------------------
      # Note: We're not managing AWS SES with Terraform simply because the service is fiddly
      # and AWS is neurotic about any changes to the config.
      # ---------------------------------------------------------------------------------
      - name: Setup AWS SES over SMTP
        run: |-
          echo "TUTOR_RUN_SMTP=true" >> $GITHUB_ENV
          tutor config save --set EMAIL_BACKEND="django.core.mail.backends.smtp.EmailBackend" \
                            --set EMAIL_HOST="{{ cookiecutter.ci_deploy_EMAIL_HOST }}" \
                            --set EMAIL_HOST_PASSWORD={% raw %}${{ secrets.AWS_SES_IAM_SECRET }}{% endraw %} \
                            --set EMAIL_HOST_USER={% raw %}${{ secrets.AWS_SES_IAM_KEY }}{% endraw %} \
                            --set EMAIL_PORT={{ cookiecutter.ci_deploy_EMAIL_PORT }} \
                            --set EMAIL_USE_TLS={{ cookiecutter.ci_deploy_EMAIL_USE_TLS }}

      # see: https://github.com/{{ cookiecutter.github_account_name }}/{{ cookiecutter.github_repo_name }}/blob/main/terraform/modules/kubernetes_secrets/main.tf
      - name: fetch EDX Secret Key from Kubernetes secrets
        run: |-
          kubectl get secret edx-secret-key -n $NAMESPACE  -o json | jq  '.data | map_values(@base64d)' | jq -r 'keys[] as $k | "TUTOR_\($k|ascii_upcase)=\(.[$k])"' >> $GITHUB_ENV

      - name: Load environment specific settings (direct)
        run: |-
          # Pin the instalation ID with the Kubernetes namespace. It needs to be unique and static per instalation.
          cat ci/tutor-deploy/environments/$ENVIRONMENT_ID/config.yml >> $GITHUB_ENV

      # note that values like $LMS_HOSTNAME come from this repo
      # in /ci/tutor-deploy/environments/{{ cookiecutter.environment_name }}/config.yml
      - name: Load additional environment specific settings  (computed)
        run: |-
          # We don't want to run these services as we are using the Kubernetes ingress instead.
          echo "TUTOR_ID=tutor-$NAMESPACE" >> $GITHUB_ENV
          echo "TUTOR_LMS_HOST=$LMS_HOSTNAME" >> $GITHUB_ENV
          echo "TUTOR_CMS_HOST=$CMS_HOSTNAME" >> $GITHUB_ENV
          echo "TUTOR_K8S_NAMESPACE=$NAMESPACE" >> $GITHUB_ENV
          echo "TUTOR_DOCKER_IMAGE_OPENEDX=$DOCKER_IMAGE_OPENEDX" >> $GITHUB_ENV
          echo "TUTOR_RUN_CADDY=false" >> $GITHUB_ENV
          echo "TUTOR_RUN_NGINX=false" >> $GITHUB_ENV

      # note that the Kubernetes additional config data is locally
      # stored in ci/tutor-deploy/environments/{{ cookiecutter.environment_name }}/k8s/
      # in Kubernetes manifest yaml format
      - name: Create Kubernetes add-on resources
        run:  |-
          # Create kubernetes ingress and other environment resources
          kubectl apply -f "ci/tutor-deploy/environments/$ENVIRONMENT_ID/k8s"

      # Notes: OPENEDX_AWS_ACCESS_KEY, OPENEDX_AWS_SECRET_ACCESS_KEY and S3_STORAGE_BUCKET
      #        are stored in EKS kubernetes secrets, viewable from k9s.
      #        example values:
      #          OPENEDX_AWS_ACCESS_KEY: ABDCE123456789OHBBGQ
      #          OPENEDX_AWS_SECRET_ACCESS_KEY: A123456789srJ8lgel+ABCDEFGHIJKabcdefghijk
      #          S3_STORAGE_BUCKET: {{ cookiecutter.global_platform_name }}-{{ cookiecutter.global_platform_region }}-{{ cookiecutter.environment_name }}-storage
      #          S3_CUSTOM_DOMAIN: cdn.{{ cookiecutter.environment_subdomain }}.{{ cookiecutter.global_root_domain }}
      #          S3_REGION: {{ cookiecutter.global_aws_region }}
      #
      # this config depends on a public read-only AWS S3 bucket policy like this:
      # https://github.com/{{ cookiecutter.github_account_name }}/terraform-openedx/blob/main/components/s3/main.tf#L19
      #
      #      {
      #          "Version": "2012-10-17",
      #          "Statement": [
      #              {
      #                  "Sid": "",
      #                  "Effect": "Allow",
      #                  "Principal": "*",
      #                  "Action": [
      #                      "s3:GetObject*",
      #                      "s3:List*"
      #                  ],
      #                  "Resource": "arn:aws:s3:::{{ cookiecutter.environment_name }}-{{ cookiecutter.global_platform_name }}-{{ cookiecutter.global_platform_region }}-storage/*"
      #              }
      #          ]
      #      }
      #
      - name: fetch S3 secrets from Kubernetes secrets
        run: |-
          kubectl get secret s3-openedx-storage -n $NAMESPACE  -o json | jq  '.data | map_values(@base64d)' | jq -r 'keys[] as $k | "TUTOR_\($k|ascii_upcase)=\(.[$k])"' >> $GITHUB_ENV

      - name: Enable plugin for S3
        run: |-
          pip install git+https://github.com/hastexo/tutor-contrib-s3@{{ cookiecutter.ci_deploy_tutor_plugin_s3_version }}
          tutor plugins enable s3

          tutor config save --set OPENEDX_AWS_ACCESS_KEY="$OPENEDX_AWS_ACCESS_KEY" \
                            --set OPENEDX_AWS_SECRET_ACCESS_KEY="$OPENEDX_AWS_SECRET_ACCESS_KEY" \
                            --set OPENEDX_AWS_QUERYSTRING_AUTH="False" \
                            --set OPENEDX_AWS_S3_SECURE_URLS="False" \
                            --set S3_STORAGE_BUCKET="$S3_STORAGE_BUCKET" \
                            --set S3_CUSTOM_DOMAIN="$S3_CUSTOM_DOMAIN" \
                            --set S3_REGION="$S3_REGION"


      - name: Configure 3rd Party Authentication
        run:  |-
          tutor config save --set OPENEDX_FACEBOOK_APP_ID="{% raw %}${{ secrets.FACEBOOK_APP_ID }}{% endraw %}" \
                            --set OPENEDX_FACEBOOK_APP_SECRET="{% raw %}${{ secrets.FACEBOOK_APP_SECRET }}{% endraw %}"

      - name: Generate Tutor Config
        run:  |-
          export TUTOR_JWT_RSA_PRIVATE_KEY=\'$(sed -E 's/$/\n/g' ./jwt_private_key)\'
          tutor config save
          cat $TUTOR_ROOT/config.yml

      #------------------------------------------------------------------------
      # IV. Merge all of the configuration data into Tutor's Open edX
      #     configuration files: config.yml, lms.env.json, cms.env.json
      #
      # In this step we're combining three sources of data:
      # 1. sensitive configuration data retrieved from Kubernetes secrets in section II above
      # 2. Open edx application and services configuration data created here in section III
      # 3. LMS and CMS application configuration data stored in our repo at ci/tutor-deploy/environments/prod/settings_merge.json
      #------------------------------------------------------------------------
      - name: Patch Generated Configuration (Static)
        run:  |-
          echo "config.yml full path: $(tutor config printroot)/config.yml"
          cat "$(tutor config printroot)/config.yml"
          echo ""
          echo ""


          cd $TUTOR_ROOT/env/apps/openedx/config/

          mv lms.env.json lms.env.json.orig
          jq -s '.[0] * .[1]'  lms.env.json.orig  "$GITHUB_WORKSPACE/ci/tutor-deploy/environments/$ENVIRONMENT_ID/settings_merge.json" >  lms.env.json

          echo 'Tutor lms.env.json contents:'
          cat lms.env.json
          echo ""
          echo ""

          mv cms.env.json cms.env.json.orig
          jq -s '.[0] * .[1]'  cms.env.json.orig  "$GITHUB_WORKSPACE/ci/tutor-deploy/environments/$ENVIRONMENT_ID/settings_merge.json" >  cms.env.json
          rm *orig

          echo 'Tutor cms.env.json contents:'
          cat cms.env.json
          echo ""
          echo ""

      #------------------------------------------------------------------------
      # V. Deploy Open edX
      #------------------------------------------------------------------------
      - name: Deploy Tutor
        run:  |-
          tutor k8s start

      - name: Run tutor init
        run:  |-
          tutor k8s init

      - name: Set theme
        run:  |-
          tutor k8s settheme edx-theme

      - name: Create admin user
        run:  |-
          $(kubectl get secret admin-edx -n $NAMESPACE  -o json | jq  '.data | map_values(@base64d)' |   jq -r 'keys[] as $k | "export \($k|ascii_upcase)=\(.[$k])"')
          tutor k8s createuser --password "$ADMIN_PASSWORD" --staff --superuser "$ADMIN_USER" admin@{{ cookiecutter.global_root_domain }}
